"use strict";(self.webpackChunkoperating_systems=self.webpackChunkoperating_systems||[]).push([[449],{2077:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>s,default:()=>l,frontMatter:()=>o,metadata:()=>c,toc:()=>a});var r=t(4848),i=t(8453);const o={sidebar_position:1},s="Count - Exercise 1",c={id:"week-6/problems/count",title:"Count - Exercise 1",description:"Starting with a variable count = 0, create N threads that increment the variable with one unit.",source:"@site/docs/week-6/problems/count.md",sourceDirName:"week-6/problems",slug:"/week-6/problems/count",permalink:"/operating-systems/week-6/problems/count",draft:!1,unlisted:!1,editUrl:"https://github.com/sirbuig/operating-systems/tree/main/docs/week-6/problems/count.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Problems",permalink:"/operating-systems/category/problems-2"},next:{title:"Producer-Consumer - Exercise 2",permalink:"/operating-systems/week-6/problems/producer-consumer"}},d={},a=[{value:"Solution",id:"solution",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...n.components},{Details:t}=e;return t||function(n,e){throw new Error("Expected "+(e?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"count---exercise-1",children:"Count - Exercise 1"})}),"\n",(0,r.jsxs)(e.p,{children:["Starting with a variable ",(0,r.jsx)(e.code,{children:"count = 0"}),", create ",(0,r.jsx)(e.code,{children:"N"})," threads that increment the variable with one unit."]}),"\n",(0,r.jsxs)(e.p,{children:["For example, if there are ",(0,r.jsx)(e.code,{children:"1000 threads"}),", the answer should be ",(0,r.jsx)(e.code,{children:"count = 1000"}),"."]}),"\n",(0,r.jsx)(e.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsxs)(e.p,{children:["Try writing an ",(0,r.jsx)(e.strong,{children:"unsynchronized"})," version first. Try to run it multiple times. What do you observe?"]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"\ud83d\udd00Unsynchronized version"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",children:'#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <errno.h>\n\n#define NO_THREADS 1000\n\nint count = 0;\n\nvoid *routine(void *args)\n{\n    count++;\n\n    return NULL;\n}\n\nint main()\n{\n    pthread_t threads[NO_THREADS];\n\n    for(int i = 0; i < NO_THREADS; i++)\n    {\n        if(pthread_create(&threads[i], NULL, routine, NULL))\n        {\n            perror(NULL);\n            return errno;\n        }\n    }\n\n    for(int i = 0; i < NO_THREADS; i++)\n    {\n        if(pthread_join(threads[i], NULL))\n        {\n            perror(NULL);\n            return errno;\n        }\n    }\n\n    printf("Unsynchronized count is: %d\\n", count);\n\n    return 0;\n}\n'})}),(0,r.jsx)(e.p,{children:"After running it for multiple times, we can observe inconsistency in our outputs (race condition). Basically, we can get any answer between 1 and 1000!"}),(0,r.jsxs)(e.p,{children:["Type ",(0,r.jsx)(e.code,{children:"for x in {1..10000}; do ./count; done > output.txt"})," in your terminal to easily check the outputs."]})]}),"\n",(0,r.jsxs)(t,{children:[(0,r.jsx)("summary",{children:"\ud83d\udd01Synchronized version"}),(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-c",metastring:'title="count.c"',children:'#include <stdio.h>\n#include <stdlib.h>\n#include <pthread.h>\n#include <errno.h>\n\n#define NO_THREADS 1000\n\nint count = 0;\n\n// MUTEX\npthread_mutex_t mtx;\n\nvoid *routine(void *args)\n{\n\n    pthread_mutex_lock(&mtx);\n\n    // critical section\n    count++;\n\n    pthread_mutex_unlock(&mtx);\n\n    return NULL;\n}\n\nint main()\n{\n    pthread_t threads[NO_THREADS];\n\n    if(pthread_mutex_init(&mtx, NULL))\n    {\n        perror(NULL);\n        return errno;\n    }\n\n    for(int i = 0; i < NO_THREADS; i++)\n    {\n        if(pthread_create(&threads[i], NULL, routine, NULL))\n        {\n            perror(NULL);\n            return errno;\n        }\n    }\n\n    for(int i = 0; i < NO_THREADS; i++)\n    {\n        if(pthread_join(threads[i], NULL))\n        {\n            perror(NULL);\n            return errno;\n        }\n    }\n\n    printf("Synchronized count is: %d\\n", count);\n\n    pthread_mutex_destroy(&mtx);\n\n    return 0;\n}\n'})})]})]})}function l(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(u,{...n})}):u(n)}},8453:(n,e,t)=>{t.d(e,{R:()=>s,x:()=>c});var r=t(6540);const i={},o=r.createContext(i);function s(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:s(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);