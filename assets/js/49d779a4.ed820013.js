"use strict";(self.webpackChunkoperating_systems=self.webpackChunkoperating_systems||[]).push([[214],{4868:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Welcome to the Operating Systems tutoring 2024 - 2025","href":"/operating-systems/","docId":"intro","unlisted":false},{"type":"category","label":"Weeks 1-2","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"C Crash Course","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Motivation for Learning C in Operating Systems","href":"/operating-systems/weeks-1-2/c-crash-course/motivation","docId":"weeks-1-2/c-crash-course/motivation","unlisted":false}],"href":"/operating-systems/category/c-crash-course"},{"type":"category","label":"Linux Basics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introduction to Linux","href":"/operating-systems/weeks-1-2/linux-basics/introduction","docId":"weeks-1-2/linux-basics/introduction","unlisted":false},{"type":"link","label":"Get familiar with the Linux CLI","href":"/operating-systems/weeks-1-2/linux-basics/tutorial","docId":"weeks-1-2/linux-basics/tutorial","unlisted":false}],"href":"/operating-systems/category/linux-basics"}],"href":"/operating-systems/category/weeks-1-2"},{"type":"category","label":"Week 3","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Syscalls You Didn\'t Know","href":"/operating-systems/week-3/syscalls-you-did-not-know","docId":"week-3/syscalls-you-did-not-know","unlisted":false},{"type":"category","label":"Problems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Exercise 1 - Size of Files","href":"/operating-systems/week-3/problems/ex1","docId":"week-3/problems/ex1","unlisted":false},{"type":"link","label":"Exercise 2 - Search the word","href":"/operating-systems/week-3/problems/ex2","docId":"week-3/problems/ex2","unlisted":false}],"href":"/operating-systems/category/problems"}],"href":"/operating-systems/category/week-3"},{"type":"category","label":"Week 4","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Understanding Fork in Operating Systems","href":"/operating-systems/week-4/understand_fork","docId":"week-4/understand_fork","unlisted":false},{"type":"link","label":"Understanding Zombie and Orphan Processes","href":"/operating-systems/week-4/zombie_orphans","docId":"week-4/zombie_orphans","unlisted":false}],"href":"/operating-systems/category/week-4"},{"type":"category","label":"Week 5","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Inter-Process Communication","href":"/operating-systems/week-5/ipc","docId":"week-5/ipc","unlisted":false},{"type":"link","label":"Threads","href":"/operating-systems/week-5/threads","docId":"week-5/threads","unlisted":false},{"type":"category","label":"Problems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"IPC - Exercise 1","href":"/operating-systems/week-5/problems/ex1","docId":"week-5/problems/ex1","unlisted":false},{"type":"link","label":"IPC - Exercise 2","href":"/operating-systems/week-5/problems/ex2","docId":"week-5/problems/ex2","unlisted":false},{"type":"link","label":"IPC - Exercise 3","href":"/operating-systems/week-5/problems/ex3","docId":"week-5/problems/ex3","unlisted":false},{"type":"link","label":"Threads - Exercise 4","href":"/operating-systems/week-5/problems/ex4","docId":"week-5/problems/ex4","unlisted":false},{"type":"link","label":"Threads - Exercise 5","href":"/operating-systems/week-5/problems/ex5","docId":"week-5/problems/ex5","unlisted":false},{"type":"link","label":"Threads - Exercise 6","href":"/operating-systems/week-5/problems/ex6","docId":"week-5/problems/ex6","unlisted":false},{"type":"link","label":"Threads - Exercise 7","href":"/operating-systems/week-5/problems/ex7","docId":"week-5/problems/ex7","unlisted":false}],"href":"/operating-systems/category/problems-1"}],"href":"/operating-systems/category/week-5"},{"type":"category","label":"Week 6","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Process Synchronization Background","href":"/operating-systems/week-6/background","docId":"week-6/background","unlisted":false},{"type":"link","label":"The Critical-Section Problem","href":"/operating-systems/week-6/critical-section","docId":"week-6/critical-section","unlisted":false},{"type":"link","label":"Mutex Locks","href":"/operating-systems/week-6/mutex-locks","docId":"week-6/mutex-locks","unlisted":false},{"type":"link","label":"Semaphores","href":"/operating-systems/week-6/semaphores","docId":"week-6/semaphores","unlisted":false},{"type":"link","label":"Extra","href":"/operating-systems/week-6/extra","docId":"week-6/extra","unlisted":false},{"type":"category","label":"Problems","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Count - Exercise 1","href":"/operating-systems/week-6/problems/count","docId":"week-6/problems/count","unlisted":false},{"type":"link","label":"Producer-Consumer - Exercise 2","href":"/operating-systems/week-6/problems/producer-consumer","docId":"week-6/problems/producer-consumer","unlisted":false}],"href":"/operating-systems/category/problems-2"}],"href":"/operating-systems/category/week-6"},{"type":"category","label":"Week 7","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"CPU Scheduling Introduction","href":"/operating-systems/week-7/scheduler-introduction","docId":"week-7/scheduler-introduction","unlisted":false},{"type":"link","label":"CPU Scheduling Algorithms","href":"/operating-systems/week-7/scheduler_algorithms","docId":"week-7/scheduler_algorithms","unlisted":false},{"type":"link","label":"Scheduling exercises","href":"/operating-systems/week-7/scheduler-exercises","docId":"week-7/scheduler-exercises","unlisted":false},{"type":"link","label":"Test the runtime of a program","href":"/operating-systems/week-7/test-speed-of-a-program","docId":"week-7/test-speed-of-a-program","unlisted":false}],"href":"/operating-systems/category/week-7"},{"type":"category","label":"Week 8","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Synchronization Examples","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Deadlock","href":"/operating-systems/week-8/synchronization-examples/deadlock","docId":"week-8/synchronization-examples/deadlock","unlisted":false},{"type":"link","label":"Classic Problems of Synchronization","href":"/operating-systems/week-8/synchronization-examples/classic-problems","docId":"week-8/synchronization-examples/classic-problems","unlisted":false},{"type":"link","label":"Extra","href":"/operating-systems/week-8/synchronization-examples/extra","docId":"week-8/synchronization-examples/extra","unlisted":false}],"href":"/operating-systems/category/synchronization-examples"},{"type":"link","label":"Real-time scheduling","href":"/operating-systems/week-8/real_time_scheduling","docId":"week-8/real_time_scheduling","unlisted":false}],"href":"/operating-systems/category/week-8"},{"type":"category","label":"Week 10","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Main Memory","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Background","href":"/operating-systems/week-10/main-memory/background","docId":"week-10/main-memory/background","unlisted":false},{"type":"link","label":"Contiguous Memory Allocation","href":"/operating-systems/week-10/main-memory/memory-allocation","docId":"week-10/main-memory/memory-allocation","unlisted":false}],"href":"/operating-systems/category/main-memory"},{"type":"link","label":"Simulation of pagination in C","href":"/operating-systems/week-10/page_problem","docId":"week-10/page_problem","unlisted":false}],"href":"/operating-systems/category/week-10"},{"type":"category","label":"Examene","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Examen 2019 SO VAR1","href":"/operating-systems/modele-examen/examen_2019_var1","docId":"modele-examen/examen_2019_var1","unlisted":false},{"type":"link","label":"Examen 2024 SO 29.01.2024","href":"/operating-systems/modele-examen/examen_2024","docId":"modele-examen/examen_2024","unlisted":false}],"href":"/operating-systems/category/examene"}]},"docs":{"intro":{"id":"intro","title":"Welcome to the Operating Systems tutoring 2024 - 2025","description":"- Talk about CPU scheduler & usage in other contexts","sidebar":"tutorialSidebar"},"modele-examen/examen_2019_var1":{"id":"modele-examen/examen_2019_var1","title":"Examen 2019 SO VAR1","description":"Solution to the exam","sidebar":"tutorialSidebar"},"modele-examen/examen_2024":{"id":"modele-examen/examen_2024","title":"Examen 2024 SO 29.01.2024","description":"Solution for exam","sidebar":"tutorialSidebar"},"week-10/main-memory/background":{"id":"week-10/main-memory/background","title":"Background","description":"Remember that memory is central to the operation of a modern computer system. It consists of a large array of bytes, each with its own address.","sidebar":"tutorialSidebar"},"week-10/main-memory/memory-allocation":{"id":"week-10/main-memory/memory-allocation","title":"Contiguous Memory Allocation","description":"Main memory must hold both the operating system and user processes, so it needs to be allocated efficiently. One early method for this is contiguous memory allocation.","sidebar":"tutorialSidebar"},"week-10/page_problem":{"id":"week-10/page_problem","title":"Simulation of pagination in C","description":"Create an app that simulates physical memory, backing store, page fault and LRU","sidebar":"tutorialSidebar"},"week-3/problems/ex1":{"id":"week-3/problems/ex1","title":"Exercise 1 - Size of Files","description":"Learn how to determine the size of files in a directory using C programming. This exercise covers directory handling, file operations, and system calls.","sidebar":"tutorialSidebar"},"week-3/problems/ex2":{"id":"week-3/problems/ex2","title":"Exercise 2 - Search the word","description":"Search for a specific string in multiple text files","sidebar":"tutorialSidebar"},"week-3/syscalls-you-did-not-know":{"id":"week-3/syscalls-you-did-not-know","title":"Syscalls You Didn\'t Know","description":"Explore lesser-known system calls and commands to enhance your understanding of operating system principles.","sidebar":"tutorialSidebar"},"week-4/understand_fork":{"id":"week-4/understand_fork","title":"Understanding Fork in Operating Systems","description":"A comprehensive guide to understanding the fork() system call in Unix-like operating systems. Learn the concept, motivation, practical applications, and see examples of how fork() is used in code.","sidebar":"tutorialSidebar"},"week-4/zombie_orphans":{"id":"week-4/zombie_orphans","title":"Understanding Zombie and Orphan Processes","description":"Learn about zombie and orphan processes in operating systems, including their definitions, examples, and how to handle them.","sidebar":"tutorialSidebar"},"week-5/ipc":{"id":"week-5/ipc","title":"Inter-Process Communication","description":"Processes executing concurrently can be either independent or cooperating.","sidebar":"tutorialSidebar"},"week-5/problems/ex1":{"id":"week-5/problems/ex1","title":"IPC - Exercise 1","description":"Set up a shared memory for communication between a parent and a child process.","sidebar":"tutorialSidebar"},"week-5/problems/ex2":{"id":"week-5/problems/ex2","title":"IPC - Exercise 2","description":"Enhance the previous program and implement a basic chat-like interaction using shared memory between a parent and a child process.","sidebar":"tutorialSidebar"},"week-5/problems/ex3":{"id":"week-5/problems/ex3","title":"IPC - Exercise 3","description":"The parent process writes an array of integers to shared memory. The child process reads the array, processes each integer (e.g., doubles it), and writes the modified array back.","sidebar":"tutorialSidebar"},"week-5/problems/ex4":{"id":"week-5/problems/ex4","title":"Threads - Exercise 4","description":"Write a multithreaded program that calculates various statistical values for a list of numbers. This program will be passed a series of numbers on the command line and will then create three separate worker threads.","sidebar":"tutorialSidebar"},"week-5/problems/ex5":{"id":"week-5/problems/ex5","title":"Threads - Exercise 5","description":"Write a multithreaded program that takes a matrix and multiplies each element in every row with a given scalar.","sidebar":"tutorialSidebar"},"week-5/problems/ex6":{"id":"week-5/problems/ex6","title":"Threads - Exercise 6","description":"Write a multithreaded program that outputs prime numbers.","sidebar":"tutorialSidebar"},"week-5/problems/ex7":{"id":"week-5/problems/ex7","title":"Threads - Exercise 7","description":"The Fibonacci sequence is the series of numbers 0, 1, 1, 2, 3, 5, 8....","sidebar":"tutorialSidebar"},"week-5/threads":{"id":"week-5/threads","title":"Threads","description":"Overview","sidebar":"tutorialSidebar"},"week-6/background":{"id":"week-6/background","title":"Process Synchronization Background","description":"A system typically consists of several (perhaps hundreds or even thousands) of threads running either concurrently or in parallel. As we saw in the last chapter about threads, they share user data.","sidebar":"tutorialSidebar"},"week-6/critical-section":{"id":"week-6/critical-section","title":"The Critical-Section Problem","description":"To guard against the race condition previously discussed, we need to ensure that only one process at a time can be manipulating the variable count. To make such a guarantee, we require that the processes be synchronized in some way.","sidebar":"tutorialSidebar"},"week-6/extra":{"id":"week-6/extra","title":"Extra","description":"Further Reading","sidebar":"tutorialSidebar"},"week-6/mutex-locks":{"id":"week-6/mutex-locks","title":"Mutex Locks","description":"Operating-system designers build higher-level software tools to solve the critical-section problem. The simplest of these tools is the mutex lock.","sidebar":"tutorialSidebar"},"week-6/problems/count":{"id":"week-6/problems/count","title":"Count - Exercise 1","description":"Starting with a variable count = 0, create N threads that increment the variable with one unit.","sidebar":"tutorialSidebar"},"week-6/problems/producer-consumer":{"id":"week-6/problems/producer-consumer","title":"Producer-Consumer - Exercise 2","description":"Implement the Producer-Consumer Problem using mutex and semaphores.","sidebar":"tutorialSidebar"},"week-6/semaphores":{"id":"week-6/semaphores","title":"Semaphores","description":"Mutex locks, as mentioned earlier, are generally considered the simplest of synchronization tools. But sometimes we need a more robust tool that can also provide more sophisticated ways for processes to synchronize their activities.","sidebar":"tutorialSidebar"},"week-7/scheduler_algorithms":{"id":"week-7/scheduler_algorithms","title":"CPU Scheduling Algorithms","description":"FCSF, SJF, SRT, RR -> I don\'t have a stroke.","sidebar":"tutorialSidebar"},"week-7/scheduler-exercises":{"id":"week-7/scheduler-exercises","title":"Scheduling exercises","description":"Test yourself with this website","sidebar":"tutorialSidebar"},"week-7/scheduler-introduction":{"id":"week-7/scheduler-introduction","title":"CPU Scheduling Introduction","description":"Learn the fundamentals of CPU scheduling, including key concepts, scheduling criteria, and real-world applications. Understand preemptive and nonpreemptive scheduling, dispatcher latency, and more.","sidebar":"tutorialSidebar"},"week-7/test-speed-of-a-program":{"id":"week-7/test-speed-of-a-program","title":"Test the runtime of a program","description":"How can we estimate the time a program takes to run?","sidebar":"tutorialSidebar"},"week-8/real_time_scheduling":{"id":"week-8/real_time_scheduling","title":"Real-time scheduling","description":"The Real-Time Scheduler is designed for real-time applications that require guaranteed and deterministic CPU time.","sidebar":"tutorialSidebar"},"week-8/synchronization-examples/classic-problems":{"id":"week-8/synchronization-examples/classic-problems","title":"Classic Problems of Synchronization","description":"The problems presented here are used for testing newly proposed synchronization schemes.","sidebar":"tutorialSidebar"},"week-8/synchronization-examples/deadlock":{"id":"week-8/synchronization-examples/deadlock","title":"Deadlock","description":"The implementation of a semaphore with a waiting queue may result in a situation where two or more processes are waiting indefinitely for an event that can be caused only by one of the waiting processes.","sidebar":"tutorialSidebar"},"week-8/synchronization-examples/extra":{"id":"week-8/synchronization-examples/extra","title":"Extra","description":"Further Reading","sidebar":"tutorialSidebar"},"weeks-1-2/c-crash-course/motivation":{"id":"weeks-1-2/c-crash-course/motivation","title":"Motivation for Learning C in Operating Systems","description":"Understand why C is a fundamental language for operating systems development and its enduring relevance in the tech world.","sidebar":"tutorialSidebar"},"weeks-1-2/linux-basics/introduction":{"id":"weeks-1-2/linux-basics/introduction","title":"Introduction to Linux","description":"An introductory guide to Linux, covering its history, key events, the Linux kernel, and Linux distributions.","sidebar":"tutorialSidebar"},"weeks-1-2/linux-basics/tutorial":{"id":"weeks-1-2/linux-basics/tutorial","title":"Get familiar with the Linux CLI","description":"A comprehensive guide to kickstart your Linux journey, covering essential command-line skills and concepts.","sidebar":"tutorialSidebar"}}}}')}}]);