"use strict";(self.webpackChunkoperating_systems=self.webpackChunkoperating_systems||[]).push([[538],{9571:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>p,frontMatter:()=>o,metadata:()=>d,toc:()=>c});var r=i(4848),t=i(8453);const o={sidebar_position:2},s="Producer-Consumer - Exercise 2",d={id:"week-6/problems/producer-consumer",title:"Producer-Consumer - Exercise 2",description:"Implement the Producer-Consumer Problem using mutex and semaphores.",source:"@site/docs/week-6/problems/producer-consumer.md",sourceDirName:"week-6/problems",slug:"/week-6/problems/producer-consumer",permalink:"/operating-systems/week-6/problems/producer-consumer",draft:!1,unlisted:!1,editUrl:"https://github.com/sirbuig/operating-systems/tree/main/docs/week-6/problems/producer-consumer.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Count - Exercise 1",permalink:"/operating-systems/week-6/problems/count"},next:{title:"Week 7",permalink:"/operating-systems/category/week-7"}},u={},c=[{value:"Solution",id:"solution",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components},{Details:i}=n;return i||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"producer-consumer---exercise-2",children:"Producer-Consumer - Exercise 2"})}),"\n",(0,r.jsxs)(n.p,{children:["Implement the Producer-Consumer Problem using ",(0,r.jsx)(n.code,{children:"mutex"})," and ",(0,r.jsx)(n.code,{children:"semaphores"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"solution",children:"Solution"}),"\n",(0,r.jsx)(n.p,{children:"Just like in the last exercise, if we don't synchronize, the threads will overwrite each other."}),"\n",(0,r.jsx)(n.p,{children:"For example,"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-idk",metastring:"{9-10}",children:"Consumer id=1, item=0, position=0\nProducer id=1, item=0, position=0\nProducer id=2, item=0, position=0\nConsumer id=2, item=0, position=0\nProducer id=1, item=1, position=2\nProducer id=2, item=1, position=0\nConsumer id=1, item=1, position=2\nConsumer id=2, item=1, position=0\nProducer id=1, item=2, position=1\nProducer id=2, item=2, position=1\nConsumer id=1, item=2, position=1\nConsumer id=2, item=1, position=2\n"})}),"\n",(0,r.jsx)(n.p,{children:"we can see that two different producers wrote in the same buffer position!"}),"\n",(0,r.jsxs)(i,{children:[(0,r.jsx)("summary",{children:"\ud83d\udd01Synchronized version"}),(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",metastring:'title="producer_consumer.c"',children:'#include <stdio.h>\n#include <pthread.h>\n#include <semaphore.h>\n#include <unistd.h>\n\n#define BUFFER_SIZE 3\n#define NUM_PRODUCERS 2\n#define NUM_CONSUMERS 2\n#define NUM_ITEMS 10\n\nint buffer[BUFFER_SIZE];\nint in = 0, out = 0;\n\npthread_mutex_t buffer_mutex;\nsem_t empty, full;\n\nvoid *producer(void *args)\n{\n    int id = *(int *)args;\n    for(int i = 0; i < NUM_ITEMS; i++)\n    {\n        // wait for an empty slot\n        sem_wait(&empty);\n        pthread_mutex_lock(&buffer_mutex);\n\n        buffer[in] = i;\n        printf("Producator id=%d, item=%d, pozitie=%d\\n", id, i, in);\n        in = (in + 1) % BUFFER_SIZE;\n\n        pthread_mutex_unlock(&buffer_mutex);\n        sem_post(&full);\n        usleep(100000);\n    }\n    return NULL;\n}\n\nvoid *consumer(void *args)\n{\n    int id = *(int *)args;\n    for(int i = 0; i < NUM_ITEMS; i++)\n    {\n        sem_wait(&full);\n        pthread_mutex_lock(&buffer_mutex);\n\n        int item = buffer[out];\n        printf("Consumer id=%d, item=%d, pozitie=%d\\n", id, item, out);\n        out = (out + 1) % BUFFER_SIZE;\n\n        pthread_mutex_unlock(&buffer_mutex);\n        sem_post(&empty);\n        usleep(150000);\n    }\n    return NULL;\n}\n\nint main()\n{\n    pthread_t producers[NUM_PRODUCERS], consumers[NUM_CONSUMERS];\n    int producer_ids[NUM_PRODUCERS], consumer_ids[NUM_CONSUMERS];\n\n    pthread_mutex_init(&buffer_mutex, NULL);\n    sem_init(&empty, 0, BUFFER_SIZE); // BUFFER_SIZE empty slots\n    sem_init(&full, 0, 0); // 0 occupied slots\n\n    for(int i = 0; i < NUM_PRODUCERS; i++)\n    {\n        producer_ids[i] = i + 1;\n        pthread_create(&producers[i], NULL, producer, &producer_ids[i]);\n    }\n\n    for(int i = 0; i < NUM_CONSUMERS; i++)\n    {\n        consumer_ids[i] = i + 1;\n        pthread_create(&consumers[i], NULL, consumer, &consumer_ids[i]);\n    }\n\n    for(int i = 0; i < NUM_PRODUCERS; i++)\n        pthread_join(producers[i], NULL);\n\n    for(int i = 0; i < NUM_CONSUMERS; i++)\n        pthread_join(consumers[i], NULL);\n\n    pthread_mutex_destroy(&buffer_mutex);\n    sem_destroy(&empty);\n    sem_destroy(&full);\n\n    return 0;\n}\n'})})]})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var r=i(6540);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);