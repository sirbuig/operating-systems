"use strict";(self.webpackChunkoperating_systems=self.webpackChunkoperating_systems||[]).push([[180],{5151:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>d,toc:()=>a});var i=t(4848),s=t(8453);const r={sidebar_position:1,title:"Exercise 1 - Size of Files",description:"Learn how to determine the size of files in a directory using C programming. This exercise covers directory handling, file operations, and system calls.",keywords:["C programming","file size","directory handling","system calls","file operations"]},o="Exercise 1 (easy) - Size of files",d={id:"week-3/problems/ex1",title:"Exercise 1 - Size of Files",description:"Learn how to determine the size of files in a directory using C programming. This exercise covers directory handling, file operations, and system calls.",source:"@site/docs/week-3/problems/ex1.md",sourceDirName:"week-3/problems",slug:"/week-3/problems/ex1",permalink:"/operating-systems/week-3/problems/ex1",draft:!1,unlisted:!1,editUrl:"https://github.com/sirbuig/operating-systems/tree/main/docs/week-3/problems/ex1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Exercise 1 - Size of Files",description:"Learn how to determine the size of files in a directory using C programming. This exercise covers directory handling, file operations, and system calls.",keywords:["C programming","file size","directory handling","system calls","file operations"]},sidebar:"tutorialSidebar",previous:{title:"Problems",permalink:"/operating-systems/category/problems"},next:{title:"Exercise 2 - Search the word",permalink:"/operating-systems/week-3/problems/ex2"}},l={},a=[{value:"Description",id:"description",level:2},{value:"Download the test folder",id:"download-the-test-folder",level:4},{value:"Example",id:"example",level:3},{value:"Idea",id:"idea",level:3}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",...(0,s.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"exercise-1-easy---size-of-files",children:"Exercise 1 (easy) - Size of files"})}),"\n",(0,i.jsx)(n.p,{children:"The first step for falling into the darkness of c"}),"\n",(0,i.jsxs)(n.p,{children:["What it will be shown below isn't just an exercise to illustrate some functions from\n",(0,i.jsx)(n.a,{href:"https://cs.unibuc.ro/~pirofti/so/so-lab-2.pdf",children:"lab 2"}),", but rather showcase some optional syscalls,\nlearn how to search about them, and recap some c functions (good to know)."]}),"\n",(0,i.jsx)(n.p,{children:"The following information is also useful for the project part (after lab 8)."}),"\n",(0,i.jsx)(n.h2,{id:"description",children:"Description"}),"\n",(0,i.jsxs)(n.p,{children:['Given a folder "tests01" with 3 .txt files in it, find the size of each file and write in "output.txt" the following : ',(0,i.jsx)(n.code,{children:"[ filename ]: [ size in bytes] Bytes"}),"."]}),"\n",(0,i.jsx)(n.h4,{id:"download-the-test-folder",children:(0,i.jsx)(n.a,{target:"_blank","data-noBrokenLinkCheck":!0,href:t(4529).A+"",children:"Download the test folder"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,i.jsx)(n.p,{children:'By running the code the file "output.txt" will look like this:'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-txt",children:"file1 copy.txt: 817 Bytes\nfile1.txt: 812 Bytes\ntest3.txt: 4 Bytes\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"idea",children:"Idea"}),"\n",(0,i.jsxs)(n.p,{children:["Let's take the task and split in more parts. The first thing we need to do is finding a way to open each .txt file from a folder.\nSo the ",(0,i.jsx)(n.code,{children:"first step"})," is to open the folder and print each file name."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83d\udca1Hint 1"})}),(0,i.jsxs)(n.p,{children:["Read about ",(0,i.jsx)(n.code,{children:"opendir()"}),", ",(0,i.jsx)(n.code,{children:"readdir()"})," and ",(0,i.jsx)(n.code,{children:"dirent"})," (a structure);"]})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83e\udd16Code sample for step 1"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'#include <stdio.h>\n#include <dirent.h>\nint main() {\n    struct dirent *entry;\n    DIR *dir = opendir("tests01");\n    while((entry = readdir(dir)) != NULL) {\n        printf("%s\\n", entry->d_name);\n    }\n    closedir(dir);\n}\n'})}),(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Did we actually make 'ls' ?"}),"\n"]})]}),"\n",(0,i.jsxs)(n.p,{children:["Now, how do we get access to the size of a file? That is the ",(0,i.jsx)(n.code,{children:"step 2"})]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83e\udd16Code sample for step 2"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'       struct stat st;\n       char path[265];\n       snprintf(path, sizeof(path), "tests01/%s", entry->d_name);\n       stat(path, &st); //stat will need a path and it will start from the location of the .c file.\n\n       int size = st.st_size; //tadaa\n'})})]}),"\n",(0,i.jsxs)(n.p,{children:["All right, now is the ",(0,i.jsx)(n.code,{children:"final step"}),", merge them together. For this part you'll need the information from ",(0,i.jsx)(n.a,{href:"https://cs.unibuc.ro/~pirofti/so/so-lab-2.pdf",children:"lab 2"}),"\nfor ",(0,i.jsx)(n.code,{children:"open"}),", ",(0,i.jsx)(n.code,{children:"write"})," in order to open the output.txt and write there."]}),"\n",(0,i.jsxs)(r,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83e\udd16The final code"})}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-c",children:'\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <errno.h>\n#include <stdio.h>\n#include <string.h>\n#include <dirent.h>\nint main() {\n    int destination_fd = open("output.txt", O_WRONLY | O_CREAT | O_TRUNC, 0644);\n\n    struct dirent *entry; //information about a file from a director\n    DIR *dir = opendir("tests01");\n\n    while((entry = readdir(dir)) != NULL) {\n        if (strcmp(entry->d_name, ".") == 0 || strcmp(entry->d_name, "..") == 0) {\n            continue;\n        }\n\n        struct stat st;\n        char path[265];\n        snprintf(path, sizeof(path), "tests01/%s", entry->d_name);\n        stat(path, &st);\n\n        write(destination_fd, entry->d_name, strlen(entry->d_name));\n        write(destination_fd, ": ", 2);\n\n        char size_str[32];\n        snprintf(size_str, sizeof(size_str), "%ld Bytes\\n", st.st_size);\n        write(destination_fd, size_str, strlen(size_str));\n    }\n    closedir(dir);\n    close(destination_fd);\n    return 0;\n}\n\n'})})]}),"\n",(0,i.jsx)(n.p,{children:"Hope this problem helped you in some way \ud83d\ude0a and get ready for exercise 2, which will take some of the information presented here\nand add something spicy."})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},4529:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/files/tests01-ce34aa851b929efc29ddd00c8d7ee173.zip"},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>d});var i=t(6540);const s={},r=i.createContext(s);function o(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);