"use strict";(self.webpackChunkoperating_systems=self.webpackChunkoperating_systems||[]).push([[6557],{8846:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>d,contentTitle:()=>r,default:()=>l,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var i=t(4848),n=t(8453);const o={sidebar_position:4},r="Semaphores",a={id:"week-6/semaphores",title:"Semaphores",description:"Mutex locks, as mentioned earlier, are generally considered the simplest of synchronization tools. But sometimes we need a more robust tool that can also provide more sophisticated ways for processes to synchronize their activities.",source:"@site/docs/week-6/semaphores.md",sourceDirName:"week-6",slug:"/week-6/semaphores",permalink:"/operating-systems/week-6/semaphores",draft:!1,unlisted:!1,editUrl:"https://github.com/sirbuig/operating-systems/tree/main/docs/week-6/semaphores.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Mutex Locks",permalink:"/operating-systems/week-6/mutex-locks"},next:{title:"Extra",permalink:"/operating-systems/week-6/extra"}},d={},c=[{value:"POSIX API",id:"posix-api",level:2},{value:"<code>sem_init()</code>",id:"sem_init",level:3},{value:"<code>sem_wait()</code> and <code>sem_post()</code>",id:"sem_wait-and-sem_post",level:3}];function h(e){const s={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"semaphores",children:"Semaphores"})}),"\n",(0,i.jsx)(s.p,{children:"Mutex locks, as mentioned earlier, are generally considered the simplest of synchronization tools. But sometimes we need a more robust tool that can also provide more sophisticated ways for processes to synchronize their activities."}),"\n",(0,i.jsxs)(s.p,{children:["A ",(0,i.jsx)(s.strong,{children:"semaphore"})," S is an integer variable that, apart from initialization, is accessed only through two standard atomic operations: ",(0,i.jsx)(s.code,{children:"wait()"})," and ",(0,i.jsx)(s.code,{children:"signal()"}),"."]}),"\n",(0,i.jsx)(s.admonition,{type:"tip",children:(0,i.jsxs)(s.p,{children:["A mutex is particular case of semaphor with ",(0,i.jsx)(s.code,{children:"S = 1"}),"."]})}),"\n",(0,i.jsx)(s.h2,{id:"posix-api",children:"POSIX API"}),"\n",(0,i.jsx)(s.h3,{id:"sem_init",children:(0,i.jsx)(s.code,{children:"sem_init()"})}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"int sem_init(sem_t *sem, int pshared, unisigned int value);\n"})}),"\n",(0,i.jsxs)(s.p,{children:["This sets the semaphore ",(0,i.jsx)(s.code,{children:"sem"})," with ",(0,i.jsx)(s.code,{children:"S = value"}),". Use 0 for ",(0,i.jsx)(s.code,{children:"pshared"}),"."]}),"\n",(0,i.jsxs)(s.h3,{id:"sem_wait-and-sem_post",children:[(0,i.jsx)(s.code,{children:"sem_wait()"})," and ",(0,i.jsx)(s.code,{children:"sem_post()"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"sem_wait()"})," decrements ",(0,i.jsx)(s.code,{children:"S"})," with one unit, but if ",(0,i.jsx)(s.code,{children:"S=0"})," then the function waits for the value to rise before further decrementing, thus blocking the thread!"]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"sem_post()"})," increments ",(0,i.jsx)(s.code,{children:"S"})," with one unit and if there are blocked threads, then it frees the one who waited the most in the queue."]}),"\n",(0,i.jsxs)(s.p,{children:["To destroy a semaphore, use ",(0,i.jsx)(s.code,{children:"sem_destroy(sem_t *sem)"}),"."]})]})}function l(e={}){const{wrapper:s}={...(0,n.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},8453:(e,s,t)=>{t.d(s,{R:()=>r,x:()=>a});var i=t(6540);const n={},o=i.createContext(n);function r(e){const s=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:r(e.components),i.createElement(o.Provider,{value:s},e.children)}}}]);