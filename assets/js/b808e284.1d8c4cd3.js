"use strict";(self.webpackChunkoperating_systems=self.webpackChunkoperating_systems||[]).push([[640],{4776:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>l});var i=n(4848),s=n(8453);const t={sidebar_position:1,title:"Understanding Fork in Operating Systems",description:"A comprehensive guide to understanding the fork() system call in Unix-like operating systems. Learn the concept, motivation, practical applications, and see examples of how fork() is used in code.",keywords:["fork()","process creation","Unix","operating systems","C programming","process management","fork examples","fork applications"]},o="Understand the process creation",a={id:"week-4/understand_fork",title:"Understanding Fork in Operating Systems",description:"A comprehensive guide to understanding the fork() system call in Unix-like operating systems. Learn the concept, motivation, practical applications, and see examples of how fork() is used in code.",source:"@site/docs/week-4/understand_fork.md",sourceDirName:"week-4",slug:"/week-4/understand_fork",permalink:"/operating-systems/week-4/understand_fork",draft:!1,unlisted:!1,editUrl:"https://github.com/sirbuig/operating-systems/tree/main/docs/week-4/understand_fork.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Understanding Fork in Operating Systems",description:"A comprehensive guide to understanding the fork() system call in Unix-like operating systems. Learn the concept, motivation, practical applications, and see examples of how fork() is used in code.",keywords:["fork()","process creation","Unix","operating systems","C programming","process management","fork examples","fork applications"]},sidebar:"tutorialSidebar",previous:{title:"Week 4",permalink:"/operating-systems/category/week-4"},next:{title:"Understanding Zombie and Orphan Processes",permalink:"/operating-systems/week-4/zombie_orphans"}},c={},l=[{value:"Definition",id:"definition",level:2},{value:"Why do we want to create processes",id:"why-do-we-want-to-create-processes",level:2},{value:"How is it in code",id:"how-is-it-in-code",level:2},{value:"Sample for code visualization",id:"sample-for-code-visualization",level:2},{value:"Examples",id:"examples",level:2},{value:"Part 1 - Show the picture, recreate the code",id:"part-1---show-the-picture-recreate-the-code",level:3},{value:"Part 2 - Having the code, create the image",id:"part-2---having-the-code-create-the-image",level:3},{value:"Use fork in problems",id:"use-fork-in-problems",level:2},{value:"Further Reading",id:"further-reading",level:2},{value:"References",id:"references",level:2}];function d(e){const r={a:"a",br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"understand-the-process-creation",children:"Understand the process creation"})}),"\n",(0,i.jsx)(r.p,{children:"Concept, motivation, code, examples"}),"\n",(0,i.jsx)(r.h2,{id:"definition",children:"Definition"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"fork() is the primary method of process creation of an operating system like Unix."}),"\n"]}),"\n",(0,i.jsxs)(r.p,{children:["The newly created process is known as the ",(0,i.jsx)(r.code,{children:"Child process"}),", and the process from which the child process is created is known as the ",(0,i.jsx)(r.code,{children:"Parent process"}),"."]}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["The C fork() function returns a ",(0,i.jsx)(r.strong,{children:"negative value"})," when the function fails to create a child process."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["The C fork() function returns a ",(0,i.jsx)(r.strong,{children:"zero value"})," to the child process that is newly created. On successful duplication of a process,\r\nthe PID of the child process is returned in the parent, and 0 is returned in the child process."]}),"\n"]}),"\n",(0,i.jsxs)(r.li,{children:["\n",(0,i.jsxs)(r.p,{children:["The C fork() function returns a ",(0,i.jsx)(r.strong,{children:"positive value"})," to the parent process or the caller. The positive value consists of the process ID of that particular child process that is being created."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:"How to get the pid:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"pid_t pid = fork();\n"})}),"\n",(0,i.jsx)(r.h2,{id:"why-do-we-want-to-create-processes",children:"Why do we want to create processes"}),"\n",(0,i.jsx)(r.p,{children:"Let's see some practical applications of fork:"}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsx)(r.li,{children:"Shell uses fork to run programs that you invoke from cmd."}),"\n",(0,i.jsx)(r.li,{children:"Web servers like apache use fork to create multiple server processes, each of which handles requests in its own address space."}),"\n",(0,i.jsxs)(r.li,{children:["Google Chrome uses fork to handle each page within separate process. See more on ",(0,i.jsx)(r.a,{href:"#further-reading",children:"further reading"})]}),"\n",(0,i.jsx)(r.li,{children:"When you want to isolate parts of the applications and if they crash/ leak memory/ misbehave, they can be killed/restarted without killing entire application"}),"\n",(0,i.jsx)(r.li,{children:"By hackers (put here for learning purposes): Fork bomb"}),"\n",(0,i.jsx)(r.li,{children:"Used in pipes, two processes that work together. Send information to each other."}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"how-is-it-in-code",children:"How is it in code"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:'#include <stdio.h>\r\n#include <sys/types.h>\r\n#include <unistd.h>\r\nint main()\r\n{\r\n    fork();\r\n    printf("Hello world!\\n");\r\n    return 0;\r\n}\n'})}),"\n",(0,i.jsx)(r.p,{children:"Output:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-shell",children:"Hello world!\r\nHello world!\n"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{src:"https://scaler.com/topics/images/output-fork-function.webp",alt:"example of fork"})}),"\n",(0,i.jsxs)(r.p,{children:["In the example above, what is below the fork will be copied to the new process (child) and will be executed.\r\nSo, ",(0,i.jsx)(r.code,{children:"printf"})," will be run by parent and child."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83c\udf75 Coffee break with some memes"})}),(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.img,{src:"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQo0OK-ZozGy7L-A55lemFJFxYHDWnktzTh4g&s",alt:""}),"\r\n",(0,i.jsx)(r.img,{src:"https://preview.redd.it/forkingchildren-v0-inrdlfw64mic1.jpeg?auto=webp&s=aa40830be51dbc20b8420b264e037f6ae179e427",alt:""}),"\r\n",(0,i.jsx)(r.img,{src:"https://matttu.com/assets/memes/cs-2020-04-08.png",alt:""}),"\r\n",(0,i.jsx)(r.img,{src:"https://preview.redd.it/i8wiq9ddhrx71.png?auto=webp&s=1787e07a20c9f8ba6fd6367c4bd34cf897693cdc",alt:""})]})]}),"\n",(0,i.jsx)(r.h2,{id:"sample-for-code-visualization",children:"Sample for code visualization"}),"\n",(0,i.jsx)(r.p,{children:"Before getting deeper, there is a sample code we will give you. It will generate an image based on what processes are created in a C file."}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Prerequisites"})," : Download ",(0,i.jsx)(r.code,{children:"graphviz"})," on your machine."]}),"\n",(0,i.jsxs)(r.p,{children:[(0,i.jsx)(r.strong,{children:"Usage"})," :"]}),"\n",(0,i.jsxs)(r.ol,{children:["\n",(0,i.jsxs)(r.li,{children:["Create a file named ",(0,i.jsx)(r.code,{children:"forks.log"})]}),"\n",(0,i.jsxs)(r.li,{children:["Run the ",(0,i.jsx)(r.code,{children:"script.py"})," code in a separate terminal"]}),"\n",(0,i.jsxs)(r.li,{children:["Run the ",(0,i.jsx)(r.code,{children:"template.c"})]}),"\n"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-python",metastring:'title="script.py"',children:"import os\r\nimport time\r\nimport graphviz\r\n\r\nlog_file_path = 'forks.log'\r\n\r\ndot = graphviz.Digraph(comment='Forks')\r\n\r\ndef update_graph():\r\n    global dot\r\n    dot = graphviz.Digraph(comment='Forks')\r\n\r\n    with open(log_file_path, 'r') as file:\r\n        lines = file.readlines()\r\n\r\n    for line in lines:\r\n        if line.strip():\r\n            parts = line.split()\r\n            parent = parts[1]\r\n            child = parts[3]\r\n            dot.node(parent, f'Parent {parent}')\r\n            dot.node(child, f'Me {child}')\r\n            dot.edge(parent, child)\r\n\r\n    output_filename = 'forks_graph'\r\n    dot.render(output_filename, format='png')\r\n    print(f\"Graph updated and saved as {output_filename}.png\")\r\n\r\n\r\ndef monitor_log():\r\n    if not os.path.exists(log_file_path):\r\n        print(f\"No log file found at {log_file_path}\")\r\n        return\r\n    last_size = os.path.getsize(log_file_path)\r\n    while True:\r\n        update_graph()\r\n        time.sleep(3)\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    monitor_log()\n"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",metastring:'title="template.c"',children:'#include <stdio.h>\r\n#include <unistd.h>\r\n#include <sys/types.h>\r\n#include <sys/wait.h>\r\n#include <stdlib.h>\r\nvoid clear_log() {\r\n    FILE *log_file = fopen("forks.log", "w");\r\n    if (log_file != NULL) {\r\n        fclose(log_file);\r\n    }\r\n}\r\n\r\nvoid log_fork(pid_t parent, pid_t child) {\r\n    FILE *log_file = fopen("forks.log", "a");\r\n    if (log_file != NULL) {\r\n        fprintf(log_file, "Parent %d Me %d\\n", parent, child);\r\n        fclose(log_file);\r\n    }\r\n}\r\n\r\nint main() {\r\n    clear_log();\r\n\r\n    // Try me\r\n    // fork();\r\n\r\n    log_fork(getppid(), getpid());\r\n    return 0;\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"examples",children:"Examples"}),"\n",(0,i.jsx)(r.h3,{id:"part-1---show-the-picture-recreate-the-code",children:"Part 1 - Show the picture, recreate the code"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Exercise 1:"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"part 1 exercise 1",src:n(7358).A+"",width:"323",height:"543"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83d\udca1Solution"})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"if(!fork()){\r\n    if(!fork()){\r\n        fork();\r\n    }\r\n}\n"})}),(0,i.jsxs)(r.p,{children:["Explanation:\r\nFirst, the first ",(0,i.jsx)(r.code,{children:"fork()"})," is done, then ",(0,i.jsx)(r.code,{children:"if(!fork())"})," means that the code continues if we are in the child process."]})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Exercise 2"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"part 1 exercise 2",src:n(6133).A+"",width:"841",height:"244"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83d\udca1Solution"})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"if(fork()){\r\n    if(fork()){\r\n        fork();\r\n    }\r\n}\n"})}),(0,i.jsxs)(r.p,{children:["Explanation:\r\nFirst, the first ",(0,i.jsx)(r.code,{children:"fork()"})," is done, then ",(0,i.jsx)(r.code,{children:"if(fork())"})," means that the code continues if we are in the parent process."]})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Exercise 3:"})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"part 1 exercise 3",src:n(8620).A+"",width:"1501",height:"513"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83d\udca1Solution"})}),(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"if(!fork()){\r\n    if(fork()){\r\n        fork();\r\n    }\r\n}else{\r\n    if(!fork()){\r\n        if(fork()){\r\n            fork();\r\n        }\r\n    }\r\n}\n"})})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsxs)(r.strong,{children:["Exercise 4 (try to solve it and then verify the solution with the ",(0,i.jsx)(r.a,{href:"#sample-for-code-visualization",children:"sample code"}),")"]})}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"part 1 exercise 4",src:n(2227).A+"",width:"1434",height:"560"})}),"\n",(0,i.jsx)(r.h3,{id:"part-2---having-the-code-create-the-image",children:"Part 2 - Having the code, create the image"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Exercise 1"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"for(int i = 0; i < 2; i ++){\r\n    if(fork()){\r\n        fork();\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83d\udca1Solution"})}),(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"part 2 exercise 1",src:n(4801).A+"",width:"1441",height:"391"})}),(0,i.jsxs)(r.p,{children:["Explanation:\r\n",(0,i.jsx)(r.img,{alt:"part2 exercise 1 solved",src:n(3415).A+"",width:"1441",height:"391"})]})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Exercise 2"})}),"\n",(0,i.jsxs)(r.p,{children:["For this one, find what it looks like, but also ",(0,i.jsx)(r.strong,{children:"what is the formula"})," to calculate how many new processes are created for any ",(0,i.jsx)(r.code,{children:"n"})," given."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"int n = 2;\r\nfor(int i = 0; i < n; i ++){\r\n    for(int j = i; j >= 0; j --){\r\n        fork();\r\n    }\r\n}\n"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83d\udca1Solution"})}),(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"part 2 exercise 2",src:n(138).A+"",width:"993",height:"399"})}),(0,i.jsx)(r.p,{children:"Formula: 2^(n * (n + 1) / 2) - 1"}),(0,i.jsx)(r.p,{children:"Human form:\r\n2^(how many forks are made) - (the main process which is not new)"})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"Exercise 3"})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"if(fork() || fork()){\r\n    fork();\r\n}\n"})}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:(0,i.jsx)("i",{children:"\ud83d\udca1Solution"})}),(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"exercise 3",src:n(1715).A+"",width:"730",height:"371"})}),(0,i.jsxs)(r.p,{children:["This one is tricky. First it does the fork() and now we have the parent and the child.\r\nThe parent returns something > 0 and the child returns 0. The ",(0,i.jsx)(r.code,{children:"||"})," goes to the next element if we have false on the first argument\r\n(this is called Short-circuit evaluation). So for the child it will do a ",(0,i.jsx)(r.code,{children:"fork()"}),"."]}),(0,i.jsx)(r.p,{children:"The last fork is done for each parent from the if statement. We have (1 || 0), (0 || 1)."}),(0,i.jsxs)(r.p,{children:["If it is not yer clear, try with more forks in the if statement. For example ",(0,i.jsx)(r.code,{children:"if(fork() || fork() || fork() )"})]}),(0,i.jsx)(r.p,{children:(0,i.jsx)(r.img,{alt:"fork_or_fork",src:n(2997).A+"",width:"1600",height:"1000"})})]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsxs)(r.strong,{children:["Exercise 4 (try yourself now and verify with the ",(0,i.jsx)(r.a,{href:"#sample-for-code-visualization",children:"sample code"}),")"]})}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",children:"if(fork() && (!fork())){\r\n    if(fork() || fork()){\r\n        fork();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"use-fork-in-problems",children:"Use fork in problems"}),"\n",(0,i.jsx)(r.p,{children:'Let\'s create a simple problem. We want to printf for n times "Hello world" and for each print we will use a child.'}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-c",metastring:'title="multi-process hello world"',children:'#include <dirent.h>\r\n#include <stdio.h>\r\n#include <errno.h>\r\n#include <unistd.h>\r\n#include <sys/wait.h>\r\n#include <stdlib.h>\r\n\r\n\r\nint main(int argc, char *argv[]){\r\n    //we create n processes\r\n    for(int i = 1; i <= atoi(argv[1]); i ++){\r\n        int pid = fork();\r\n        if (pid < 0){\r\n            return errno;\r\n        }\r\n        else if (pid == 0){\r\n            //kiddo\r\n            printf("Hello world, %d\\n", i);\r\n            printf("Done Parent %d Me %d\\n", getppid(), getpid());\r\n\r\n           return 0; //The child kills himself\r\n        }\r\n    }\r\n    //we wait after n processes\r\n    for(int i = 1; i <= atoi(argv[1]); i ++){\r\n        wait(NULL);\r\n    }\r\n\r\n    return 0;\r\n}\n'})}),"\n",(0,i.jsxs)(r.p,{children:["At each iteration, we will do a fork and create a child which does what he needs to do and then returns ",(0,i.jsx)(r.code,{children:"0"}),".",(0,i.jsx)(r.br,{}),"\n","The intuition is that we will have ",(0,i.jsx)(r.code,{children:"2^n"})," processes, but in fact we will have ",(0,i.jsx)(r.code,{children:"n"})," processes because of ",(0,i.jsx)(r.code,{children:"return 0"}),"."]}),"\n",(0,i.jsxs)(r.p,{children:["To ensure that our processes run in parallel, we need to do the last ",(0,i.jsx)(r.code,{children:"for"})," (waiting ",(0,i.jsx)(r.code,{children:"n"})," times). If we had put the ",(0,i.jsx)(r.code,{children:"wait"})," command inside the first ",(0,i.jsx)(r.code,{children:"for"})," loop, the processes would not run in parallel."]}),"\n",(0,i.jsx)(r.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://blog.chromium.org/2008/09/multi-process-architecture.html",children:"https://blog.chromium.org/2008/09/multi-process-architecture.html"})}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://stackoverflow.com/questions/985051/what-is-the-purpose-of-fork",children:"https://stackoverflow.com/questions/985051/what-is-the-purpose-of-fork"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://stackoverflow.com/questions/5839519/motivation-for-spawning-a-new-process-v-thread",children:"https://stackoverflow.com/questions/5839519/motivation-for-spawning-a-new-process-v-thread"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.scaler.com/topics/c-fork/",children:"https://www.scaler.com/topics/c-fork/"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Pipeline_(Unix)",children:"https://en.wikipedia.org/wiki/Pipeline_(Unix)"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Fork_bomb",children:"https://en.wikipedia.org/wiki/Fork_bomb"})}),"\n",(0,i.jsx)(r.li,{children:(0,i.jsx)(r.a,{href:"https://www.geeksforgeeks.org/fork-practice-questions/",children:"https://www.geeksforgeeks.org/fork-practice-questions/"})}),"\n"]})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},2997:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/fork_or_fork-2d85947317fee0aaf5be49bcc8e8621c.jpeg"},7358:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/part1_ex1-84de1d28ccdeadfd0f3e9f82b72fcbdc.png"},6133:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/part1_ex2-3e139b0fd5b6c60cbf355196b2059803.png"},8620:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/part1_ex3-7be532033a4f1d2cde4d34793928e8fe.png"},2227:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/part1_ex4-688e8d645e88bd5e1a87a1272a992fa7.png"},4801:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/part2_ex1-89523b9f1d6d3b0add6fd49080d61307.png"},3415:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/part2_ex1_solution-17aa354ad6552da60f585fcf33a77b77.png"},138:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/part2_ex2-6f5ed8f450e8f54f0c0c3c9fef58b296.png"},1715:(e,r,n)=>{n.d(r,{A:()=>i});const i=n.p+"assets/images/part2_ex3-b0cdf339d7a34b2d58f94f22e47abfd7.png"},8453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var i=n(6540);const s={},t=i.createContext(s);function o(e){const r=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:r},e.children)}}}]);